(function() {var implementors = {
"rust_ml":[["impl Freeze for <a class=\"enum\" href=\"rust_ml/base/error/enum.ErrorKind.html\" title=\"enum rust_ml::base::error::ErrorKind\">ErrorKind</a>",1,["rust_ml::base::error::ErrorKind"]],["impl Freeze for <a class=\"struct\" href=\"rust_ml/base/error/struct.Error.html\" title=\"struct rust_ml::base::error::Error\">Error</a>",1,["rust_ml::base::error::Error"]],["impl&lt;X, Y&gt; Freeze for <a class=\"struct\" href=\"rust_ml/dataset/struct.Dataset.html\" title=\"struct rust_ml::dataset::Dataset\">Dataset</a>&lt;X, Y&gt;<div class=\"where\">where\n    X: Freeze,\n    Y: Freeze,</div>",1,["rust_ml::dataset::Dataset"]],["impl Freeze for <a class=\"enum\" href=\"rust_ml/dataset/enum.MixedDataValue.html\" title=\"enum rust_ml::dataset::MixedDataValue\">MixedDataValue</a>",1,["rust_ml::dataset::MixedDataValue"]],["impl&lt;Y&gt; Freeze for <a class=\"struct\" href=\"rust_ml/dataset/struct.MixedDataset.html\" title=\"struct rust_ml::dataset::MixedDataset\">MixedDataset</a>&lt;Y&gt;<div class=\"where\">where\n    Y: Freeze,</div>",1,["rust_ml::dataset::MixedDataset"]],["impl&lt;K, V&gt; Freeze for <a class=\"struct\" href=\"rust_ml/preprocessing/encoders/labelencoder/struct.LabelEncoder.html\" title=\"struct rust_ml::preprocessing::encoders::labelencoder::LabelEncoder\">LabelEncoder</a>&lt;K, V&gt;",1,["rust_ml::preprocessing::encoders::labelencoder::LabelEncoder"]],["impl&lt;K, V&gt; Freeze for <a class=\"struct\" href=\"rust_ml/preprocessing/encoders/labelencoder/struct.LabelEncoderFitter.html\" title=\"struct rust_ml::preprocessing::encoders::labelencoder::LabelEncoderFitter\">LabelEncoderFitter</a>&lt;K, V&gt;",1,["rust_ml::preprocessing::encoders::labelencoder::LabelEncoderFitter"]],["impl&lt;Y&gt; Freeze for <a class=\"struct\" href=\"rust_ml/preprocessing/encoders/onehotencoder/struct.OneHotEncoder.html\" title=\"struct rust_ml::preprocessing::encoders::onehotencoder::OneHotEncoder\">OneHotEncoder</a>&lt;Y&gt;",1,["rust_ml::preprocessing::encoders::onehotencoder::OneHotEncoder"]],["impl&lt;Y&gt; Freeze for <a class=\"struct\" href=\"rust_ml/preprocessing/encoders/onehotencoder/struct.OneHotEncoderFitter.html\" title=\"struct rust_ml::preprocessing::encoders::onehotencoder::OneHotEncoderFitter\">OneHotEncoderFitter</a>&lt;Y&gt;",1,["rust_ml::preprocessing::encoders::onehotencoder::OneHotEncoderFitter"]],["impl&lt;Y&gt; Freeze for <a class=\"struct\" href=\"rust_ml/preprocessing/scalers/minmaxscaler/struct.MinMaxScaler.html\" title=\"struct rust_ml::preprocessing::scalers::minmaxscaler::MinMaxScaler\">MinMaxScaler</a>&lt;Y&gt;",1,["rust_ml::preprocessing::scalers::minmaxscaler::MinMaxScaler"]],["impl&lt;Y&gt; Freeze for <a class=\"struct\" href=\"rust_ml/preprocessing/scalers/minmaxscaler/struct.MinMaxFitter.html\" title=\"struct rust_ml::preprocessing::scalers::minmaxscaler::MinMaxFitter\">MinMaxFitter</a>&lt;Y&gt;",1,["rust_ml::preprocessing::scalers::minmaxscaler::MinMaxFitter"]],["impl Freeze for <a class=\"enum\" href=\"rust_ml/preprocessing/enum.FitStatus.html\" title=\"enum rust_ml::preprocessing::FitStatus\">FitStatus</a>",1,["rust_ml::preprocessing::FitStatus"]]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()